import sqlite3 from 'sqlite3';
import { promisify } from 'util';
import path from 'path';
import fs from 'fs';
import { Logger } from '../utils/Logger';
export interface NewsSource {
    id?: number;
    name: string;
    url: string;
    type: 'website' | 'twitter' | 'facebook';
    isActive: boolean;
    lastScanned?: string;
    scanFrequency: number; // minutes
    maxResults: number;
    createdAt?: string;
    updatedAt?: string;
}
export interface Article {
    id?: number;
    sourceId: number;
    title: string;
    content: string;
    url: string;
    publishedAt: string;
    summary?: string;
    sentiment?: 'positive' | 'negative' | 'neutral';
    keywords?: string;
    createdAt?: string;
}
export interface ScanResult {
    id?: number;
    sourceId: number;
    articlesFound: number;
    articlesProcessed: number;
    errors?: string;
    scanDuration: number; // milliseconds
    createdAt?: string;
}
export class DatabaseService {
    private db: sqlite3.Database | null = null;
    private dbPath: string;
    constructor() {
        this.dbPath = process.env.DATABASE_PATH || './data/news.db';
        // Ensure data directory exists
        const dataDir = path.dirname(this.dbPath);
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
        }
    }
    /**
     * Initialize database connection and create tables if they don't exist
     */
    public async initialize(): Promise<void> {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    Logger.error('Error opening database:', err);
                    reject(err);
                    return;
                }
                Logger.info(`üì¶ Database connected: ${this.dbPath}`);
                this.createTables()
                    .then(() => resolve())
                    .catch(reject);
            });
        });
    }
    /**
     * Create database tables with proper schema
     */
    private async createTables(): Promise<void> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        // News sources table
        await run(`
            CREATE TABLE IF NOT EXISTS sources (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                url TEXT NOT NULL UNIQUE,
                type TEXT NOT NULL CHECK (type IN ('website', 'twitter', 'facebook')),
                isActive BOOLEAN DEFAULT 1,
                lastScanned DATETIME,
                scanFrequency INTEGER DEFAULT 30,
                maxResults INTEGER DEFAULT 3,
                createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
                updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);
        // Articles table
        await run(`
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sourceId INTEGER NOT NULL,
                title TEXT NOT NULL,
                content TEXT NOT NULL,
                url TEXT NOT NULL UNIQUE,
                publishedAt DATETIME NOT NULL,
                summary TEXT,
                sentiment TEXT CHECK (sentiment IN ('positive', 'negative', 'neutral')),
                keywords TEXT,
                createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (sourceId) REFERENCES sources (id) ON DELETE CASCADE
            )
        `);
        // Scan results table for monitoring and analytics
        await run(`
            CREATE TABLE IF NOT EXISTS scan_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sourceId INTEGER NOT NULL,
                articlesFound INTEGER DEFAULT 0,
                articlesProcessed INTEGER DEFAULT 0,
                errors TEXT,
                scanDuration INTEGER DEFAULT 0,
                createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (sourceId) REFERENCES sources (id) ON DELETE CASCADE
            )
        `);
        // Create indexes for better performance
        await run(`CREATE INDEX IF NOT EXISTS idx_articles_published ON articles (publishedAt DESC)`);
        await run(`CREATE INDEX IF NOT EXISTS idx_articles_source ON articles (sourceId)`);
        await run(`CREATE INDEX IF NOT EXISTS idx_sources_active ON sources (isActive)`);
        await run(`CREATE INDEX IF NOT EXISTS idx_scan_results_created ON scan_results (createdAt DESC)`);
        Logger.info('‚úÖ Database tables created/verified');
    }
    /**
     * Add a new news source to monitor
     */
    public async addSource(source: Omit<NewsSource, 'id' | 'createdAt' | 'updatedAt'>): Promise<number> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        const result = await run(`
            INSERT INTO sources (name, url, type, isActive, scanFrequency, maxResults)
            VALUES (?, ?, ?, ?, ?, ?)
        `, [source.name, source.url, source.type, source.isActive, source.scanFrequency, source.maxResults]);
        Logger.info(`üì∞ Added new source: ${source.name} (${source.url})`);
        return result.lastID!;
    }
    /**
     * Get all news sources, optionally filtered by active status
     */
    public async getSources(activeOnly = false): Promise<NewsSource[]> {
        if (!this.db) throw new Error('Database not initialized');
        const all = promisify(this.db.all.bind(this.db));
        const query = activeOnly 
            ? 'SELECT * FROM sources WHERE isActive = 1 ORDER BY name'
            : 'SELECT * FROM sources ORDER BY name';
        return await all(query);
    }
    /**
     * Update a news source
     */
    public async updateSource(id: number, updates: Partial<NewsSource>): Promise<void> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');
        const values = Object.values(updates);
        await run(`
            UPDATE sources 
            SET ${fields}, updatedAt = CURRENT_TIMESTAMP 
            WHERE id = ?
        `, [...values, id]);
        Logger.info(`üìù Updated source ${id}`);
    }
    /**
     * Delete a news source and all its articles
     */
    public async deleteSource(id: number): Promise<void> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        await run('DELETE FROM sources WHERE id = ?', [id]);
        Logger.info(`üóëÔ∏è Deleted source ${id}`);
    }
    /**
     * Add a new article
     */
    public async addArticle(article: Omit<Article, 'id' | 'createdAt'>): Promise<number> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        try {
            const result = await run(`
                INSERT INTO articles (sourceId, title, content, url, publishedAt, summary, sentiment, keywords)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                article.sourceId,
                article.title,
                article.content,
                article.url,
                article.publishedAt,
                article.summary,
                article.sentiment,
                article.keywords
            ]);
            return result.lastID!;
        } catch (error: any) {
            // Handle duplicate URL constraint
            if (error.code === 'SQLITE_CONSTRAINT_UNIQUE') {
                Logger.debug(`Article already exists: ${article.url}`);
                return -1; // Indicate duplicate
            }
            throw error;
        }
    }
    /**
     * Get articles with pagination and filtering
     */
    public async getArticles(options: {
        limit?: number;
        offset?: number;
        sourceId?: number;
        since?: string;
        orderBy?: 'publishedAt' | 'createdAt';
        order?: 'ASC' | 'DESC';
    } = {}): Promise<{ articles: Article[]; total: number }> {
        if (!this.db) throw new Error('Database not initialized');
        const all = promisify(this.db.all.bind(this.db));
        const get = promisify(this.db.get.bind(this.db));
        const {
            limit = 50,
            offset = 0,
            sourceId,
            since,
            orderBy = 'publishedAt',
            order = 'DESC'
        } = options;
        // Build WHERE clause
        const conditions: string[] = [];
        const params: any[] = [];
        if (sourceId) {
            conditions.push('a.sourceId = ?');
            params.push(sourceId);
        }
        if (since) {
            conditions.push('a.publishedAt >= ?');
            params.push(since);
        }
        const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';
        // Get total count
        const countQuery = `
            SELECT COUNT(*) as total 
            FROM articles a 
            ${whereClause}
        `;
        const countResult = await get(countQuery, params);
        const total = countResult.total;
        // Get articles with source information
        const articlesQuery = `
            SELECT 
                a.*,
                s.name as sourceName,
                s.type as sourceType
            FROM articles a
            JOIN sources s ON a.sourceId = s.id
            ${whereClause}
            ORDER BY a.${orderBy} ${order}
            LIMIT ? OFFSET ?
        `;
        const articles = await all(articlesQuery, [...params, limit, offset]);
        return { articles, total };
    }
    /**
     * Record scan results for monitoring
     */
    public async recordScanResult(result: Omit<ScanResult, 'id' | 'createdAt'>): Promise<void> {
        if (!this.db) throw new Error('Database not initialized');
        const run = promisify(this.db.run.bind(this.db));
        await run(`
            INSERT INTO scan_results (sourceId, articlesFound, articlesProcessed, errors, scanDuration)
            VALUES (?, ?, ?, ?, ?)
        `, [result.sourceId, result.articlesFound, result.articlesProcessed, result.errors, result.scanDuration]);
    }
    /**
     * Get analytics data for dashboard
     */
    public async getAnalytics(days = 7): Promise<any> {
        if (!this.db) throw new Error('Database not initialized');
        const all = promisify(this.db.all.bind(this.db));
        const get = promisify(this.db.get.bind(this.db));
        const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString();
        // Articles per day
        const articlesPerDay = await all(`
            SELECT 
                DATE(publishedAt) as date,
                COUNT(*) as count
            FROM articles 
            WHERE publishedAt >= ?
            GROUP BY DATE(publishedAt)
            ORDER BY date DESC
        `, [since]);
        // Articles by source
        const articlesBySource = await all(`
            SELECT 
                s.name,
                s.type,
                COUNT(a.id) as articleCount
            FROM sources s
            LEFT JOIN articles a ON s.id = a.sourceId AND a.publishedAt >= ?
            GROUP BY s.id, s.name, s.type
            ORDER BY articleCount DESC
        `, [since]);
        // Total stats
        const totalStats = await get(`
            SELECT 
                COUNT(DISTINCT s.id) as totalSources,
                COUNT(a.id) as totalArticles,
                COUNT(CASE WHEN a.summary IS NOT NULL THEN 1 END) as summarizedArticles
            FROM sources s
            LEFT JOIN articles a ON s.id = a.sourceId AND a.publishedAt >= ?
        `, [since]);
        return {
            period: `${days} days`,
            articlesPerDay,
            articlesBySource,
            totalStats
        };
    }
    /**
     * Close database connection
     */
    public async close(): Promise<void> {
        if (this.db) {
            return new Promise((resolve, reject) => {
                this.db!.close((err) => {
                    if (err) {
                        Logger.error('Error closing database:', err);
                        reject(err);
                    } else {
                        Logger.info('üì¶ Database connection closed');
                        resolve();
                    }
                });
            });
        }
    }
}